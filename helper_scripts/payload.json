{
   "data": {
   "type": "state-versions",
     "attributes": {
       "serial": 1,
       "md5": "b076a8fbce5106466bc23ac89fc0d567",
       "lineage": "9df5d09a-2e8b-7a39-ed30-94179ba31d49",
       "state": ""
     }
   }
 }
